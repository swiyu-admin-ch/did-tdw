// SPDX-License-Identifier: MIT
namespace did_tdw {
};

[External="did_sidekicks"]
typedef struct Jwk;

[External="did_sidekicks"]
typedef enum VerificationType;

[External="did_sidekicks"]
typedef struct VerificationMethod;

[External="did_sidekicks"]
typedef interface DidMethodParameter;

// Thrown by `TrustDidWeb`'s constructor `resolve`
[External="did_sidekicks"]
typedef enum DidResolverError;

// Returned by `TrustDidWeb`'s method `get_did_doc_obj`
[External="did_sidekicks"]
typedef interface DidDoc;

[External="did_sidekicks"]
typedef trait DidLogEntryJsonSchema;

[External="did_sidekicks"]
typedef enum DidLogEntryValidatorError;

[External="did_sidekicks"]
typedef struct DidLogEntryValidator;

/// The error accompanying `TrustDidWebId`.
/// It might occur while calling TrustDidWebId methods.
[Error]
enum TrustDidWebIdResolutionError {
    /// DID method is not supported by this resolver.
    "MethodNotSupported",
    /// Invalid method-specific identifier.
    "InvalidMethodSpecificId"
};

interface TrustDidWebDidMethodParameters {
    /// Returns the SCID part from the supplied DID.
    string get_scid();
    ///
    sequence<string> get_update_keys();
    ///
    boolean is_deactivated();
};

/// Represents a TDW DID, as specified at https://identity.foundation/trustdidweb/#method-specific-identifier:
///
/// "The did:tdw method-specific identifier contains both the self-certifying identifier (SCID) for the DID,
/// and a fully qualified domain name (with an optional path) that is secured by a TLS/SSL certificate."
interface TrustDidWebId {
    /// The only (non-empty) constructor in charge of DID parsing.
    ///
    /// CAUTION Calling any of the available getters should take place after this method is called, not earlier.
    [Name=parse_did_tdw, Throws=TrustDidWebIdResolutionError]
    constructor(string did_tdw);
    /// Returns the SCID part from the supplied DID.
    string get_scid();
    /// Returns the url part from the supplied TDW DID.
    string get_url();
};

/// The error accompanying TrustDidWeb.
/// It might occur while calling TrustDidWeb methods.
[Error]
enum TrustDidWebError {
    /// DID method is not supported by this resolver.
    ///        
    /// @deprecated as redundant
    "MethodNotSupported",
    /// Invalid method-specific identifier.
    "InvalidMethodSpecificId",
    /// Failed to serialize DID document (to JSON).
    "SerializationFailed",
    /// The supplied did doc is invalid or contains an argument which isn't part of the did specification/recommendation.
    "DeserializationFailed",
    /// Invalid (or not yet supported) operation against DID doc.
    ///        
    /// @deprecated as redundant        
    "InvalidOperation",
    /// Invalid DID parameter.
    "InvalidDidParameter",
    /// Invalid DID document.
    "InvalidDidDocument",
    /// Invalid DID log integration proof.
    "InvalidDataIntegrityProof"
};

interface TrustDidWeb {
    /// @deprecated        
    [Name=read, Throws=TrustDidWebError]
    constructor(string did_tdw, string did_log);
    ///
    [Name=resolve, Throws=DidResolverError]
    constructor(string did_tdw, string did_log);
    string get_did();
    string get_did_log();
    string get_did_doc();
    ///
    TrustDidWebDidMethodParameters get_did_method_parameters();
    /// Delivers the fully qualified DID document (as `DidDoc`) contained within the DID log previously resolved in the constructor
    ///[Throws=TrustDdidWebError]
    DidDoc get_did_doc_obj_thread_safe();
};

/// W.r.t. corresponding specification version available at https://identity.foundation/didwebvh/v0.3
///
/// # CAUTION The single currently supported `didwebvh` specification version is: v0.3
enum TrustDidWebDidLogEntryJsonSchema {
    /// As defined by https://identity.foundation/didwebvh/v0.3 but w.r.t. (eID-conformity) addendum:
    /// - https://confluence.bit.admin.ch/display/EIDTEAM/DID+Log+Conformity+Check
    /// - https://confluence.bit.admin.ch/display/EIDTEAM/DID+Doc+Conformity+Check
    "V03EidConform",
    /// As (strictly) specified by https://identity.foundation/didwebvh/v0.3
    "V03",
};